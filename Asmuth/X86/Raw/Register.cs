using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Asmuth.X86.Raw
{
	[Flags]
	public enum Register : ushort
	{
		Index_Shift = 0,
		Index_Mask = 0x1F << Index_Shift,

		Size_Shift = 5,
		Size_Unspecified = 0 << Size_Shift,
		Size_High8 = 1 << Size_Shift,
		Size_8 = 2 << Size_Shift,
		Size_16 = 3 << Size_Shift,
		Size_32 = 4 << Size_Shift,
		Size_64 = 5 << Size_Shift,
		Size_128 = 6 << Size_Shift,
		Size_256 = 7 << Size_Shift,
		Size_512 = 8 << Size_Shift,
		Size_Mask = 0xF << Size_Shift,

		Family_Shift = 9,
		Family_GeneralPurpose = 0 << Family_Shift, // TODO: IP, FLAGS, segment, pointer, index registers
		Family_X87 = 1 << Family_Shift,
		Family_Mmx = Family_X87,
		Family_Sse = 2 << Family_Shift,
		Family_AvxOpmask = 3 << Family_Shift,
		Family_Mask = 0x7F << Family_Shift,

		AH = Family_GeneralPurpose | Size_High8 | 0,
		CH = Family_GeneralPurpose | Size_High8 | 1,
		DH = Family_GeneralPurpose | Size_High8 | 2,
		BH = Family_GeneralPurpose | Size_High8 | 3,

		AL = Family_GeneralPurpose | Size_8 | 0,
		CL = Family_GeneralPurpose | Size_8 | 1,
		DL = Family_GeneralPurpose | Size_8 | 2,
		BL = Family_GeneralPurpose | Size_8 | 3,
		SPL = Family_GeneralPurpose | Size_8 | 4,
		BPL = Family_GeneralPurpose | Size_8 | 5,
		SIL = Family_GeneralPurpose | Size_8 | 6,
		DIL = Family_GeneralPurpose | Size_8 | 7,
		R8L = Family_GeneralPurpose | Size_8 | 8,
		R9L = Family_GeneralPurpose | Size_8 | 9,
		R10L = Family_GeneralPurpose | Size_8 | 10,
		R11L = Family_GeneralPurpose | Size_8 | 11,
		R12L = Family_GeneralPurpose | Size_8 | 12,
		R13L = Family_GeneralPurpose | Size_8 | 13,
		R14L = Family_GeneralPurpose | Size_8 | 14,
		R15L = Family_GeneralPurpose | Size_8 | 15,

		AX = Family_GeneralPurpose | Size_16 | 0,
		CX = Family_GeneralPurpose | Size_16 | 1,
		DX = Family_GeneralPurpose | Size_16 | 2,
		BX = Family_GeneralPurpose | Size_16 | 3,
		SP = Family_GeneralPurpose | Size_16 | 4,
		BP = Family_GeneralPurpose | Size_16 | 5,
		SI = Family_GeneralPurpose | Size_16 | 6,
		DI = Family_GeneralPurpose | Size_16 | 7,
		R8W = Family_GeneralPurpose | Size_16 | 8,
		R9W = Family_GeneralPurpose | Size_16 | 9,
		R10W = Family_GeneralPurpose | Size_16 | 10,
		R11W = Family_GeneralPurpose | Size_16 | 11,
		R12W = Family_GeneralPurpose | Size_16 | 12,
		R13W = Family_GeneralPurpose | Size_16 | 13,
		R14W = Family_GeneralPurpose | Size_16 | 14,
		R15W = Family_GeneralPurpose | Size_16 | 15,

		EAX = Family_GeneralPurpose | Size_32 | 0,
		ECX = Family_GeneralPurpose | Size_32 | 1,
		EDX = Family_GeneralPurpose | Size_32 | 2,
		EBX = Family_GeneralPurpose | Size_32 | 3,
		ESP = Family_GeneralPurpose | Size_32 | 4,
		EBP = Family_GeneralPurpose | Size_32 | 5,
		ESI = Family_GeneralPurpose | Size_32 | 6,
		EDI = Family_GeneralPurpose | Size_32 | 7,
		R8D = Family_GeneralPurpose | Size_32 | 8,
		R9D = Family_GeneralPurpose | Size_32 | 9,
		R10D = Family_GeneralPurpose | Size_32 | 10,
		R11D = Family_GeneralPurpose | Size_32 | 11,
		R12D = Family_GeneralPurpose | Size_32 | 12,
		R13D = Family_GeneralPurpose | Size_32 | 13,
		R14D = Family_GeneralPurpose | Size_32 | 14,
		R15D = Family_GeneralPurpose | Size_32 | 15,

		RAX = Family_GeneralPurpose | Size_64 | 0,
		RCX = Family_GeneralPurpose | Size_64 | 1,
		RDX = Family_GeneralPurpose | Size_64 | 2,
		RBX = Family_GeneralPurpose | Size_64 | 3,
		RSP = Family_GeneralPurpose | Size_64 | 4,
		RBP = Family_GeneralPurpose | Size_64 | 5,
		RSI = Family_GeneralPurpose | Size_64 | 6,
		RDI = Family_GeneralPurpose | Size_64 | 7,
		R8 = Family_GeneralPurpose | Size_64 | 8,
		R9 = Family_GeneralPurpose | Size_64 | 9,
		R10 = Family_GeneralPurpose | Size_64 | 10,
		R11 = Family_GeneralPurpose | Size_64 | 11,
		R12 = Family_GeneralPurpose | Size_64 | 12,
		R13 = Family_GeneralPurpose | Size_64 | 13,
		R14 = Family_GeneralPurpose | Size_64 | 14,
		R15 = Family_GeneralPurpose | Size_64 | 15,

		ST0 = Family_X87 | Size_Unspecified | 0,
		ST1 = Family_X87 | Size_Unspecified | 1,
		ST2 = Family_X87 | Size_Unspecified | 2,
		ST3 = Family_X87 | Size_Unspecified | 3,
		ST4 = Family_X87 | Size_Unspecified | 4,
		ST5 = Family_X87 | Size_Unspecified | 5,
		ST6 = Family_X87 | Size_Unspecified | 6,
		ST7 = Family_X87 | Size_Unspecified | 7,

		MM0 = Family_Mmx | Size_Unspecified | 0,
		MM1 = Family_Mmx | Size_Unspecified | 1,
		MM2 = Family_Mmx | Size_Unspecified | 2,
		MM3 = Family_Mmx | Size_Unspecified | 3,
		MM4 = Family_Mmx | Size_Unspecified | 4,
		MM5 = Family_Mmx | Size_Unspecified | 5,
		MM6 = Family_Mmx | Size_Unspecified | 6,
		MM7 = Family_Mmx | Size_Unspecified | 7,

		Xmm0 = Family_Sse | Size_128 | 0,
		Xmm1 = Family_Sse | Size_128 | 1,
		Xmm2 = Family_Sse | Size_128 | 2,
		Xmm3 = Family_Sse | Size_128 | 3,
		Xmm4 = Family_Sse | Size_128 | 4,
		Xmm5 = Family_Sse | Size_128 | 5,
		Xmm6 = Family_Sse | Size_128 | 6,
		Xmm7 = Family_Sse | Size_128 | 7,
		Xmm8 = Family_Sse | Size_128 | 8,
		Xmm9 = Family_Sse | Size_128 | 9,
		Xmm10 = Family_Sse | Size_128 | 10,
		Xmm11 = Family_Sse | Size_128 | 11,
		Xmm12 = Family_Sse | Size_128 | 12,
		Xmm13 = Family_Sse | Size_128 | 13,
		Xmm14 = Family_Sse | Size_128 | 14,
		Xmm15 = Family_Sse | Size_128 | 15,
		// TODO: XMM16-XMM31

		Ymm0 = Family_Sse | Size_256 | 0,
		Ymm1 = Family_Sse | Size_256 | 1,
		Ymm2 = Family_Sse | Size_256 | 2,
		Ymm3 = Family_Sse | Size_256 | 3,
		Ymm4 = Family_Sse | Size_256 | 4,
		Ymm5 = Family_Sse | Size_256 | 5,
		Ymm6 = Family_Sse | Size_256 | 6,
		Ymm7 = Family_Sse | Size_256 | 7,
		Ymm8 = Family_Sse | Size_256 | 8,
		Ymm9 = Family_Sse | Size_256 | 9,
		Ymm10 = Family_Sse | Size_256 | 10,
		Ymm11 = Family_Sse | Size_256 | 11,
		Ymm12 = Family_Sse | Size_256 | 12,
		Ymm13 = Family_Sse | Size_256 | 13,
		Ymm14 = Family_Sse | Size_256 | 14,
		Ymm15 = Family_Sse | Size_256 | 15,

		Zmm0 = Family_Sse | Size_512 | 0,
		Zmm1 = Family_Sse | Size_512 | 1,
		Zmm2 = Family_Sse | Size_512 | 2,
		Zmm3 = Family_Sse | Size_512 | 3,
		Zmm4 = Family_Sse | Size_512 | 4,
		Zmm5 = Family_Sse | Size_512 | 5,
		Zmm6 = Family_Sse | Size_512 | 6,
		Zmm7 = Family_Sse | Size_512 | 7,
		Zmm8 = Family_Sse | Size_512 | 8,
		Zmm9 = Family_Sse | Size_512 | 9,
		Zmm10 = Family_Sse | Size_512 | 10,
		Zmm11 = Family_Sse | Size_512 | 11,
		Zmm12 = Family_Sse | Size_512 | 12,
		Zmm13 = Family_Sse | Size_512 | 13,
		Zmm14 = Family_Sse | Size_512 | 14,
		Zmm15 = Family_Sse | Size_512 | 15,

		K0 = Family_AvxOpmask | Size_Unspecified | 0,
		K1 = Family_AvxOpmask | Size_Unspecified | 1,
		K2 = Family_AvxOpmask | Size_Unspecified | 2,
		K3 = Family_AvxOpmask | Size_Unspecified | 3,
		K4 = Family_AvxOpmask | Size_Unspecified | 4,
		K5 = Family_AvxOpmask | Size_Unspecified | 5,
		K6 = Family_AvxOpmask | Size_Unspecified | 6,
		K7 = Family_AvxOpmask | Size_Unspecified | 7,
	}

	public static class RegisterEnum
	{
		[Pure]
		public static byte GetIndex(this Register register)
			=> (byte)((uint)(register & Register.Index_Mask) >> (int)Register.Index_Shift);
	}
}
